name: 'Build: Linux / Check: Unit tests (mtests)'

on:
  schedule: # scheduled workflows will only run on the default branch
    - cron: '0 4 */1 * *' # At 04:00 on every day-of-month
  push: # push.inputs field does not exist, use gen1 below
    branches:
    - 3.x
  pull_request: # all branches. pull_request.inputs field does not exist, edit gen1 below
  workflow_dispatch: # triggered by github web ui run "build linux" workflow button
    inputs:
      platforms:
        description: 'Platforms to build:'
        default: 'linux_x64'
        type: string
        required: true
      build_mode:
        description: 'Build mode: devel, nightly, testing, stable'
        default: 'devel'
        type: string
        required: true
      runtest:
        description: 'Check: Unit tests (mtests)'
        default: 'on'
        type: string
        required: false
      publish:
        description: 'Publish to FTP: on - publish'
        default: 'off'
        type: string
        required: false
      execfrompubdevpush:
        description: 'workflow github.event_name workaround, leave as is'
        default: 'false'
        type: string
        required: true
  workflow_call: # triggered by "uses" from other yml files. copy paste of workflow_dispatch for simplicity. "default" fields under non workflow_dispatch are ignored (unsure)
    inputs:
      platforms:
        description: 'Platforms to build:'
        default: 'linux_x64'
        type: string
        required: true
      build_mode:
        description: 'Build mode: devel, nightly, testing, stable'
        default: 'devel'
        type: string
        required: true
      runtest:
        description: 'Check: Unit tests (mtests)'
        default: 'on'
        type: string
        required: false
      publish:
        description: 'Publish to FTP: on - publish (obsolette)'
        default: 'off'
        type: string
        required: false
      execfrompubdevpush:
        description: 'workflow github.event_name workaround, leave as is'
        default: 'false'
        type: string
        required: true

jobs:
  debugbefore:
    name: debug before (linux yml)
    runs-on: ubuntu-latest
    steps:
    - name: debug before # ${{ inputs.platforms }} empty on push
      run: |
        echo "github.event_name=${{github.event_name}}"
        echo "inputs.platforms=${{ inputs.platforms }}"
        echo "inputs.execfrompubdevpush=${{ inputs.execfrompubdevpush }}"

  plan:
    name: generate strings (linux yml)
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.gen1.outputs.platforms }}
      build_mode: ${{ steps.gen1.outputs.build_mode }}
      runtest: ${{ steps.gen1.outputs.runtest }}
      publish: ${{ steps.gen1.outputs.publish }}
    steps:
    - name: debug passing buildlinuxyml  # ${{ inputs.platforms }} empty on push
      run: |
        echo "github.event_name=${{github.event_name}}"
        echo "inputs.platforms=${{ inputs.platforms }}"
    - id: gen1
      name: empty inputs on push workaround
      run: |
        if [[ "${{ github.event_name }}" == "push" ]] && [[ "${{ inputs.execfrompubdevpush }}" != "true" ]]; then

          echo "triggered by on.push of build linux" 

          echo "platforms=linux_x64" >> "$GITHUB_OUTPUT"
          echo "build_mode=devel" >> "$GITHUB_OUTPUT"
          echo "runtest=on" >> "$GITHUB_OUTPUT"
          echo "publish=off" >> "$GITHUB_OUTPUT"

        elif [[ "${{ github.event_name }}" == "push" ]];  then

          echo "triggered by on.push of publishdev , on.workflow_call of build linux"

          echo "platforms=${{ inputs.platforms }}" >> "$GITHUB_OUTPUT"
          echo "build_mode=${{ inputs.build_mode }}" >> "$GITHUB_OUTPUT"
          echo "runtest=${{ inputs.runtest }}" >> "$GITHUB_OUTPUT"
          echo "publish=${{ inputs.publish }}" >> "$GITHUB_OUTPUT"

        else

          echo "platforms=${{ inputs.platforms }}" >> "$GITHUB_OUTPUT"
          echo "build_mode=${{ inputs.build_mode }}" >> "$GITHUB_OUTPUT"
          echo "runtest=${{ inputs.runtest }}" >> "$GITHUB_OUTPUT"
          echo "publish=${{ inputs.publish }}" >> "$GITHUB_OUTPUT"

        fi

  debugafter:
    name: debug after (linux yml)
    needs:
      - plan
    runs-on: ubuntu-latest
    steps:
    - name: debug after # confirm use "needs.plan.outputs." in replace of "inputs."
      run: |
        echo "needs.plan.outputs.platforms=${{ needs.plan.outputs.platforms }}"
        
  linux_x64:
    if: ${{ contains(needs.plan.outputs.platforms, 'linux_x64') }}
    needs:
      - plan
    runs-on: ubuntu-22.04
    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.12.1
      with:
        access_token: ${{ github.token }}
    - name: Clone repository
      uses: actions/checkout@v4
    - name: Configure workflow
      env:
        pull_request_title: ${{ github.event.pull_request.title }}
      run: |
        bash ./build/ci/tools/make_build_mode_env.sh -e ${{ github.event_name }} -m ${{ needs.plan.outputs.build_mode }}
        BUILD_MODE=$(cat ./build.artifacts/env/build_mode.env)

        bash ./build/ci/tools/make_build_number.sh
        BUILD_NUMBER=$(cat ./build.artifacts/env/build_number.env)

        DO_PUBLISH='false'
        if [[ "${{ needs.plan.outputs.publish }}" == "on" || ("${{ github.event_name }}" == "schedule" && "$BUILD_MODE" == "nightly") ]]; then
          DO_PUBLISH='true'
          if [ -z "${{ secrets.OSUOSL_SSH_ENCRYPT_SECRET }}" ]; then
            echo "::warning::OSUOSL_SSH_ENCRYPT_SECRET is empty; not publishing to OSUOSL"
            DO_PUBLISH='false'
          fi
        fi

        ADD_INFO="_${GITHUB_REF#refs/heads/}"
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          ADD_INFO="_${{ github.event.pull_request.number }}_${pull_request_title}"
        fi
        UPLOAD_ARTIFACT_NAME="$(tr '":<>|*?/\\â€™' '_' <<<"Mu3.7_${BUILD_NUMBER}_Lin${ADD_INFO}")"

        echo "github.repository: ${{ github.repository }}"
        echo "BUILD_MODE=$BUILD_MODE" | tee -a $GITHUB_ENV
        echo "BUILD_NUMBER=$BUILD_NUMBER" | tee -a $GITHUB_ENV
        echo "DO_PUBLISH=$DO_PUBLISH" | tee -a $GITHUB_ENV
        echo "UPLOAD_ARTIFACT_NAME=$UPLOAD_ARTIFACT_NAME" | tee -a $GITHUB_ENV

    - name: Setup environment
      run: |
        bash ./build/ci/linux/setup.sh
    - name: Build
      run: |
        T_ID=${{ secrets.TELEMETRY_TRACK_ID }}; if [ -z "$T_ID" ]; then T_ID="''"; fi
        bash ./build/ci/linux/build.sh -n ${{ github.run_id }} --telemetry $T_ID
    - name: Package
      run: |
        bash ./build/ci/linux/package.sh
    - name: Checksum
      run: |
        bash ./build/ci/tools/checksum.sh
    - name: Publish to OSUOSL
      if: env.DO_PUBLISH == 'true'
      run: |
        bash ./build/ci/tools/osuosl/publish.sh -s ${{ secrets.OSUOSL_SSH_ENCRYPT_SECRET }} --os linux -v 3
    - name: Upload artifacts on GitHub
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.UPLOAD_ARTIFACT_NAME }}
        path: ./build.artifacts/

  run_mtests:
    if: needs.plan.outputs.runtest != 'off'
    needs:
      - plan
    runs-on: ubuntu-22.04
    env:
        # Enable AddressSanitizer in the mtest build
        CFLAGS: "-fsanitize=address -fno-omit-frame-pointer"
        CXXFLAGS: "-fsanitize=address -fno-omit-frame-pointer"
    steps:
    - name: Clone repository
      uses: actions/checkout@v4
    - name: Free disk space
      run: |
        sudo docker system prune -a -f
        sudo rm -rf /usr/local/lib/android
    - name: Setup environment
      run: |
        bash ./build/ci/linux/setup.sh
    - name: Build
      run: |
        mkdir -p build.artifacts/env
        ./build/ci/linux/build.sh -n ${{ github.run_id }} --build_mode mtests
    - name: Run mtests
      run: |
        ./build/ci/linux/runmtests.sh
